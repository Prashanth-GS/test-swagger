// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AllUsersResponse all users response
// swagger:model allUsersResponse
type AllUsersResponse struct {

	// data
	Data []*AllUsersResponseDataItems0 `json:"data"`

	// error
	Error *AllUsersResponseError `json:"error,omitempty"`

	// success
	Success interface{} `json:"success,omitempty"`
}

// Validate validates this all users response
func (m *AllUsersResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllUsersResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AllUsersResponse) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AllUsersResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllUsersResponse) UnmarshalBinary(b []byte) error {
	var res AllUsersResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllUsersResponseDataItems0 all users response data items0
// swagger:model AllUsersResponseDataItems0
type AllUsersResponseDataItems0 struct {

	// locked
	Locked interface{} `json:"locked,omitempty"`

	// mode
	Mode interface{} `json:"mode,omitempty"`

	// name
	Name interface{} `json:"name,omitempty"`

	// ref
	Ref interface{} `json:"ref,omitempty"`

	// role
	Role interface{} `json:"role,omitempty"`
}

// Validate validates this all users response data items0
func (m *AllUsersResponseDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AllUsersResponseDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllUsersResponseDataItems0) UnmarshalBinary(b []byte) error {
	var res AllUsersResponseDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllUsersResponseError all users response error
// swagger:model AllUsersResponseError
type AllUsersResponseError struct {

	// code
	Code interface{} `json:"code,omitempty"`

	// message
	Message interface{} `json:"message,omitempty"`
}

// Validate validates this all users response error
func (m *AllUsersResponseError) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AllUsersResponseError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllUsersResponseError) UnmarshalBinary(b []byte) error {
	var res AllUsersResponseError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
