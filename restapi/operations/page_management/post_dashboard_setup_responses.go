// Code generated by go-swagger; DO NOT EDIT.

package page_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Prashanth-GS/test-swagger/models"
)

// PostDashboardSetupOKCode is the HTTP code returned for type PostDashboardSetupOK
const PostDashboardSetupOKCode int = 200

/*PostDashboardSetupOK OK

swagger:response postDashboardSetupOK
*/
type PostDashboardSetupOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostDashboardSetupOK creates PostDashboardSetupOK with default headers values
func NewPostDashboardSetupOK() *PostDashboardSetupOK {

	return &PostDashboardSetupOK{}
}

// WithPayload adds the payload to the post dashboard setup o k response
func (o *PostDashboardSetupOK) WithPayload(payload *models.GeneralResponse) *PostDashboardSetupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post dashboard setup o k response
func (o *PostDashboardSetupOK) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDashboardSetupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostDashboardSetupBadRequestCode is the HTTP code returned for type PostDashboardSetupBadRequest
const PostDashboardSetupBadRequestCode int = 400

/*PostDashboardSetupBadRequest BAD REQUEST

swagger:response postDashboardSetupBadRequest
*/
type PostDashboardSetupBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostDashboardSetupBadRequest creates PostDashboardSetupBadRequest with default headers values
func NewPostDashboardSetupBadRequest() *PostDashboardSetupBadRequest {

	return &PostDashboardSetupBadRequest{}
}

// WithPayload adds the payload to the post dashboard setup bad request response
func (o *PostDashboardSetupBadRequest) WithPayload(payload *models.GeneralResponse) *PostDashboardSetupBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post dashboard setup bad request response
func (o *PostDashboardSetupBadRequest) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDashboardSetupBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostDashboardSetupUnauthorizedCode is the HTTP code returned for type PostDashboardSetupUnauthorized
const PostDashboardSetupUnauthorizedCode int = 401

/*PostDashboardSetupUnauthorized UNAUTHORIZED

swagger:response postDashboardSetupUnauthorized
*/
type PostDashboardSetupUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostDashboardSetupUnauthorized creates PostDashboardSetupUnauthorized with default headers values
func NewPostDashboardSetupUnauthorized() *PostDashboardSetupUnauthorized {

	return &PostDashboardSetupUnauthorized{}
}

// WithPayload adds the payload to the post dashboard setup unauthorized response
func (o *PostDashboardSetupUnauthorized) WithPayload(payload *models.GeneralResponse) *PostDashboardSetupUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post dashboard setup unauthorized response
func (o *PostDashboardSetupUnauthorized) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDashboardSetupUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostDashboardSetupForbiddenCode is the HTTP code returned for type PostDashboardSetupForbidden
const PostDashboardSetupForbiddenCode int = 403

/*PostDashboardSetupForbidden FORBIDDEN

swagger:response postDashboardSetupForbidden
*/
type PostDashboardSetupForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostDashboardSetupForbidden creates PostDashboardSetupForbidden with default headers values
func NewPostDashboardSetupForbidden() *PostDashboardSetupForbidden {

	return &PostDashboardSetupForbidden{}
}

// WithPayload adds the payload to the post dashboard setup forbidden response
func (o *PostDashboardSetupForbidden) WithPayload(payload *models.GeneralResponse) *PostDashboardSetupForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post dashboard setup forbidden response
func (o *PostDashboardSetupForbidden) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDashboardSetupForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostDashboardSetupNotFoundCode is the HTTP code returned for type PostDashboardSetupNotFound
const PostDashboardSetupNotFoundCode int = 404

/*PostDashboardSetupNotFound NOT FOUND

swagger:response postDashboardSetupNotFound
*/
type PostDashboardSetupNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostDashboardSetupNotFound creates PostDashboardSetupNotFound with default headers values
func NewPostDashboardSetupNotFound() *PostDashboardSetupNotFound {

	return &PostDashboardSetupNotFound{}
}

// WithPayload adds the payload to the post dashboard setup not found response
func (o *PostDashboardSetupNotFound) WithPayload(payload *models.GeneralResponse) *PostDashboardSetupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post dashboard setup not found response
func (o *PostDashboardSetupNotFound) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDashboardSetupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostDashboardSetupInternalServerErrorCode is the HTTP code returned for type PostDashboardSetupInternalServerError
const PostDashboardSetupInternalServerErrorCode int = 500

/*PostDashboardSetupInternalServerError INTERNAL SERVER ERROR

swagger:response postDashboardSetupInternalServerError
*/
type PostDashboardSetupInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostDashboardSetupInternalServerError creates PostDashboardSetupInternalServerError with default headers values
func NewPostDashboardSetupInternalServerError() *PostDashboardSetupInternalServerError {

	return &PostDashboardSetupInternalServerError{}
}

// WithPayload adds the payload to the post dashboard setup internal server error response
func (o *PostDashboardSetupInternalServerError) WithPayload(payload *models.GeneralResponse) *PostDashboardSetupInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post dashboard setup internal server error response
func (o *PostDashboardSetupInternalServerError) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDashboardSetupInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
