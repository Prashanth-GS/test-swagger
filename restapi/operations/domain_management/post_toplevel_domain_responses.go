// Code generated by go-swagger; DO NOT EDIT.

package domain_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Prashanth-GS/test-swagger/models"
)

// PostToplevelDomainOKCode is the HTTP code returned for type PostToplevelDomainOK
const PostToplevelDomainOKCode int = 200

/*PostToplevelDomainOK OK

swagger:response postToplevelDomainOK
*/
type PostToplevelDomainOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostToplevelDomainOK creates PostToplevelDomainOK with default headers values
func NewPostToplevelDomainOK() *PostToplevelDomainOK {

	return &PostToplevelDomainOK{}
}

// WithPayload adds the payload to the post toplevel domain o k response
func (o *PostToplevelDomainOK) WithPayload(payload *models.GeneralResponse) *PostToplevelDomainOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post toplevel domain o k response
func (o *PostToplevelDomainOK) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostToplevelDomainOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostToplevelDomainBadRequestCode is the HTTP code returned for type PostToplevelDomainBadRequest
const PostToplevelDomainBadRequestCode int = 400

/*PostToplevelDomainBadRequest BAD REQUEST

swagger:response postToplevelDomainBadRequest
*/
type PostToplevelDomainBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostToplevelDomainBadRequest creates PostToplevelDomainBadRequest with default headers values
func NewPostToplevelDomainBadRequest() *PostToplevelDomainBadRequest {

	return &PostToplevelDomainBadRequest{}
}

// WithPayload adds the payload to the post toplevel domain bad request response
func (o *PostToplevelDomainBadRequest) WithPayload(payload *models.GeneralResponse) *PostToplevelDomainBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post toplevel domain bad request response
func (o *PostToplevelDomainBadRequest) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostToplevelDomainBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostToplevelDomainUnauthorizedCode is the HTTP code returned for type PostToplevelDomainUnauthorized
const PostToplevelDomainUnauthorizedCode int = 401

/*PostToplevelDomainUnauthorized UNAUTHORIZED

swagger:response postToplevelDomainUnauthorized
*/
type PostToplevelDomainUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostToplevelDomainUnauthorized creates PostToplevelDomainUnauthorized with default headers values
func NewPostToplevelDomainUnauthorized() *PostToplevelDomainUnauthorized {

	return &PostToplevelDomainUnauthorized{}
}

// WithPayload adds the payload to the post toplevel domain unauthorized response
func (o *PostToplevelDomainUnauthorized) WithPayload(payload *models.GeneralResponse) *PostToplevelDomainUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post toplevel domain unauthorized response
func (o *PostToplevelDomainUnauthorized) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostToplevelDomainUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostToplevelDomainForbiddenCode is the HTTP code returned for type PostToplevelDomainForbidden
const PostToplevelDomainForbiddenCode int = 403

/*PostToplevelDomainForbidden FORBIDDEN

swagger:response postToplevelDomainForbidden
*/
type PostToplevelDomainForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostToplevelDomainForbidden creates PostToplevelDomainForbidden with default headers values
func NewPostToplevelDomainForbidden() *PostToplevelDomainForbidden {

	return &PostToplevelDomainForbidden{}
}

// WithPayload adds the payload to the post toplevel domain forbidden response
func (o *PostToplevelDomainForbidden) WithPayload(payload *models.GeneralResponse) *PostToplevelDomainForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post toplevel domain forbidden response
func (o *PostToplevelDomainForbidden) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostToplevelDomainForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostToplevelDomainNotFoundCode is the HTTP code returned for type PostToplevelDomainNotFound
const PostToplevelDomainNotFoundCode int = 404

/*PostToplevelDomainNotFound NOT FOUND

swagger:response postToplevelDomainNotFound
*/
type PostToplevelDomainNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostToplevelDomainNotFound creates PostToplevelDomainNotFound with default headers values
func NewPostToplevelDomainNotFound() *PostToplevelDomainNotFound {

	return &PostToplevelDomainNotFound{}
}

// WithPayload adds the payload to the post toplevel domain not found response
func (o *PostToplevelDomainNotFound) WithPayload(payload *models.GeneralResponse) *PostToplevelDomainNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post toplevel domain not found response
func (o *PostToplevelDomainNotFound) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostToplevelDomainNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostToplevelDomainInternalServerErrorCode is the HTTP code returned for type PostToplevelDomainInternalServerError
const PostToplevelDomainInternalServerErrorCode int = 500

/*PostToplevelDomainInternalServerError INTERNAL SERVER ERROR

swagger:response postToplevelDomainInternalServerError
*/
type PostToplevelDomainInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostToplevelDomainInternalServerError creates PostToplevelDomainInternalServerError with default headers values
func NewPostToplevelDomainInternalServerError() *PostToplevelDomainInternalServerError {

	return &PostToplevelDomainInternalServerError{}
}

// WithPayload adds the payload to the post toplevel domain internal server error response
func (o *PostToplevelDomainInternalServerError) WithPayload(payload *models.GeneralResponse) *PostToplevelDomainInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post toplevel domain internal server error response
func (o *PostToplevelDomainInternalServerError) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostToplevelDomainInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
