// Code generated by go-swagger; DO NOT EDIT.

package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetResetPasswordRequestEmailHandlerFunc turns a function with the right signature into a get reset password request email handler
type GetResetPasswordRequestEmailHandlerFunc func(GetResetPasswordRequestEmailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetResetPasswordRequestEmailHandlerFunc) Handle(params GetResetPasswordRequestEmailParams) middleware.Responder {
	return fn(params)
}

// GetResetPasswordRequestEmailHandler interface for that can handle valid get reset password request email params
type GetResetPasswordRequestEmailHandler interface {
	Handle(GetResetPasswordRequestEmailParams) middleware.Responder
}

// NewGetResetPasswordRequestEmail creates a new http.Handler for the get reset password request email operation
func NewGetResetPasswordRequestEmail(ctx *middleware.Context, handler GetResetPasswordRequestEmailHandler) *GetResetPasswordRequestEmail {
	return &GetResetPasswordRequestEmail{Context: ctx, Handler: handler}
}

/*GetResetPasswordRequestEmail swagger:route GET /reset-password-request/{email} login getResetPasswordRequestEmail

GetResetPasswordRequestEmail get reset password request email API

*/
type GetResetPasswordRequestEmail struct {
	Context *middleware.Context
	Handler GetResetPasswordRequestEmailHandler
}

func (o *GetResetPasswordRequestEmail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetResetPasswordRequestEmailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
