// Code generated by go-swagger; DO NOT EDIT.

package register

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Prashanth-GS/test-swagger/models"
)

// PostRegisterDetailsOKCode is the HTTP code returned for type PostRegisterDetailsOK
const PostRegisterDetailsOKCode int = 200

/*PostRegisterDetailsOK OK

swagger:response postRegisterDetailsOK
*/
type PostRegisterDetailsOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostRegisterDetailsOK creates PostRegisterDetailsOK with default headers values
func NewPostRegisterDetailsOK() *PostRegisterDetailsOK {

	return &PostRegisterDetailsOK{}
}

// WithPayload adds the payload to the post register details o k response
func (o *PostRegisterDetailsOK) WithPayload(payload *models.GeneralResponse) *PostRegisterDetailsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post register details o k response
func (o *PostRegisterDetailsOK) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRegisterDetailsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRegisterDetailsBadRequestCode is the HTTP code returned for type PostRegisterDetailsBadRequest
const PostRegisterDetailsBadRequestCode int = 400

/*PostRegisterDetailsBadRequest BAD REQUEST

swagger:response postRegisterDetailsBadRequest
*/
type PostRegisterDetailsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostRegisterDetailsBadRequest creates PostRegisterDetailsBadRequest with default headers values
func NewPostRegisterDetailsBadRequest() *PostRegisterDetailsBadRequest {

	return &PostRegisterDetailsBadRequest{}
}

// WithPayload adds the payload to the post register details bad request response
func (o *PostRegisterDetailsBadRequest) WithPayload(payload *models.GeneralResponse) *PostRegisterDetailsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post register details bad request response
func (o *PostRegisterDetailsBadRequest) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRegisterDetailsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRegisterDetailsUnauthorizedCode is the HTTP code returned for type PostRegisterDetailsUnauthorized
const PostRegisterDetailsUnauthorizedCode int = 401

/*PostRegisterDetailsUnauthorized UNAUTHORIZED

swagger:response postRegisterDetailsUnauthorized
*/
type PostRegisterDetailsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostRegisterDetailsUnauthorized creates PostRegisterDetailsUnauthorized with default headers values
func NewPostRegisterDetailsUnauthorized() *PostRegisterDetailsUnauthorized {

	return &PostRegisterDetailsUnauthorized{}
}

// WithPayload adds the payload to the post register details unauthorized response
func (o *PostRegisterDetailsUnauthorized) WithPayload(payload *models.GeneralResponse) *PostRegisterDetailsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post register details unauthorized response
func (o *PostRegisterDetailsUnauthorized) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRegisterDetailsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRegisterDetailsForbiddenCode is the HTTP code returned for type PostRegisterDetailsForbidden
const PostRegisterDetailsForbiddenCode int = 403

/*PostRegisterDetailsForbidden FORBIDDEN

swagger:response postRegisterDetailsForbidden
*/
type PostRegisterDetailsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostRegisterDetailsForbidden creates PostRegisterDetailsForbidden with default headers values
func NewPostRegisterDetailsForbidden() *PostRegisterDetailsForbidden {

	return &PostRegisterDetailsForbidden{}
}

// WithPayload adds the payload to the post register details forbidden response
func (o *PostRegisterDetailsForbidden) WithPayload(payload *models.GeneralResponse) *PostRegisterDetailsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post register details forbidden response
func (o *PostRegisterDetailsForbidden) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRegisterDetailsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRegisterDetailsNotFoundCode is the HTTP code returned for type PostRegisterDetailsNotFound
const PostRegisterDetailsNotFoundCode int = 404

/*PostRegisterDetailsNotFound NOT FOUND

swagger:response postRegisterDetailsNotFound
*/
type PostRegisterDetailsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostRegisterDetailsNotFound creates PostRegisterDetailsNotFound with default headers values
func NewPostRegisterDetailsNotFound() *PostRegisterDetailsNotFound {

	return &PostRegisterDetailsNotFound{}
}

// WithPayload adds the payload to the post register details not found response
func (o *PostRegisterDetailsNotFound) WithPayload(payload *models.GeneralResponse) *PostRegisterDetailsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post register details not found response
func (o *PostRegisterDetailsNotFound) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRegisterDetailsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRegisterDetailsInternalServerErrorCode is the HTTP code returned for type PostRegisterDetailsInternalServerError
const PostRegisterDetailsInternalServerErrorCode int = 500

/*PostRegisterDetailsInternalServerError INTERNAL SERVER ERROR

swagger:response postRegisterDetailsInternalServerError
*/
type PostRegisterDetailsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewPostRegisterDetailsInternalServerError creates PostRegisterDetailsInternalServerError with default headers values
func NewPostRegisterDetailsInternalServerError() *PostRegisterDetailsInternalServerError {

	return &PostRegisterDetailsInternalServerError{}
}

// WithPayload adds the payload to the post register details internal server error response
func (o *PostRegisterDetailsInternalServerError) WithPayload(payload *models.GeneralResponse) *PostRegisterDetailsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post register details internal server error response
func (o *PostRegisterDetailsInternalServerError) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRegisterDetailsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
