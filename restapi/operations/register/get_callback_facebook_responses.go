// Code generated by go-swagger; DO NOT EDIT.

package register

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Prashanth-GS/test-swagger/models"
)

// GetCallbackFacebookOKCode is the HTTP code returned for type GetCallbackFacebookOK
const GetCallbackFacebookOKCode int = 200

/*GetCallbackFacebookOK OK

swagger:response getCallbackFacebookOK
*/
type GetCallbackFacebookOK struct {

	/*
	  In: Body
	*/
	Payload *models.LoginResponse `json:"body,omitempty"`
}

// NewGetCallbackFacebookOK creates GetCallbackFacebookOK with default headers values
func NewGetCallbackFacebookOK() *GetCallbackFacebookOK {

	return &GetCallbackFacebookOK{}
}

// WithPayload adds the payload to the get callback facebook o k response
func (o *GetCallbackFacebookOK) WithPayload(payload *models.LoginResponse) *GetCallbackFacebookOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get callback facebook o k response
func (o *GetCallbackFacebookOK) SetPayload(payload *models.LoginResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCallbackFacebookOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCallbackFacebookBadRequestCode is the HTTP code returned for type GetCallbackFacebookBadRequest
const GetCallbackFacebookBadRequestCode int = 400

/*GetCallbackFacebookBadRequest BAD REQUEST

swagger:response getCallbackFacebookBadRequest
*/
type GetCallbackFacebookBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewGetCallbackFacebookBadRequest creates GetCallbackFacebookBadRequest with default headers values
func NewGetCallbackFacebookBadRequest() *GetCallbackFacebookBadRequest {

	return &GetCallbackFacebookBadRequest{}
}

// WithPayload adds the payload to the get callback facebook bad request response
func (o *GetCallbackFacebookBadRequest) WithPayload(payload *models.GeneralResponse) *GetCallbackFacebookBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get callback facebook bad request response
func (o *GetCallbackFacebookBadRequest) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCallbackFacebookBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCallbackFacebookUnauthorizedCode is the HTTP code returned for type GetCallbackFacebookUnauthorized
const GetCallbackFacebookUnauthorizedCode int = 401

/*GetCallbackFacebookUnauthorized UNAUTHORIZED

swagger:response getCallbackFacebookUnauthorized
*/
type GetCallbackFacebookUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewGetCallbackFacebookUnauthorized creates GetCallbackFacebookUnauthorized with default headers values
func NewGetCallbackFacebookUnauthorized() *GetCallbackFacebookUnauthorized {

	return &GetCallbackFacebookUnauthorized{}
}

// WithPayload adds the payload to the get callback facebook unauthorized response
func (o *GetCallbackFacebookUnauthorized) WithPayload(payload *models.GeneralResponse) *GetCallbackFacebookUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get callback facebook unauthorized response
func (o *GetCallbackFacebookUnauthorized) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCallbackFacebookUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCallbackFacebookForbiddenCode is the HTTP code returned for type GetCallbackFacebookForbidden
const GetCallbackFacebookForbiddenCode int = 403

/*GetCallbackFacebookForbidden FORBIDDEN

swagger:response getCallbackFacebookForbidden
*/
type GetCallbackFacebookForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewGetCallbackFacebookForbidden creates GetCallbackFacebookForbidden with default headers values
func NewGetCallbackFacebookForbidden() *GetCallbackFacebookForbidden {

	return &GetCallbackFacebookForbidden{}
}

// WithPayload adds the payload to the get callback facebook forbidden response
func (o *GetCallbackFacebookForbidden) WithPayload(payload *models.GeneralResponse) *GetCallbackFacebookForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get callback facebook forbidden response
func (o *GetCallbackFacebookForbidden) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCallbackFacebookForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCallbackFacebookNotFoundCode is the HTTP code returned for type GetCallbackFacebookNotFound
const GetCallbackFacebookNotFoundCode int = 404

/*GetCallbackFacebookNotFound NOT FOUND

swagger:response getCallbackFacebookNotFound
*/
type GetCallbackFacebookNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewGetCallbackFacebookNotFound creates GetCallbackFacebookNotFound with default headers values
func NewGetCallbackFacebookNotFound() *GetCallbackFacebookNotFound {

	return &GetCallbackFacebookNotFound{}
}

// WithPayload adds the payload to the get callback facebook not found response
func (o *GetCallbackFacebookNotFound) WithPayload(payload *models.GeneralResponse) *GetCallbackFacebookNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get callback facebook not found response
func (o *GetCallbackFacebookNotFound) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCallbackFacebookNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCallbackFacebookInternalServerErrorCode is the HTTP code returned for type GetCallbackFacebookInternalServerError
const GetCallbackFacebookInternalServerErrorCode int = 500

/*GetCallbackFacebookInternalServerError INTERNAL SERVER ERROR

swagger:response getCallbackFacebookInternalServerError
*/
type GetCallbackFacebookInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewGetCallbackFacebookInternalServerError creates GetCallbackFacebookInternalServerError with default headers values
func NewGetCallbackFacebookInternalServerError() *GetCallbackFacebookInternalServerError {

	return &GetCallbackFacebookInternalServerError{}
}

// WithPayload adds the payload to the get callback facebook internal server error response
func (o *GetCallbackFacebookInternalServerError) WithPayload(payload *models.GeneralResponse) *GetCallbackFacebookInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get callback facebook internal server error response
func (o *GetCallbackFacebookInternalServerError) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCallbackFacebookInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
