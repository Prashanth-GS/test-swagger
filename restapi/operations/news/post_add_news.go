// Code generated by go-swagger; DO NOT EDIT.

package news

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostAddNewsHandlerFunc turns a function with the right signature into a post add news handler
type PostAddNewsHandlerFunc func(PostAddNewsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAddNewsHandlerFunc) Handle(params PostAddNewsParams) middleware.Responder {
	return fn(params)
}

// PostAddNewsHandler interface for that can handle valid post add news params
type PostAddNewsHandler interface {
	Handle(PostAddNewsParams) middleware.Responder
}

// NewPostAddNews creates a new http.Handler for the post add news operation
func NewPostAddNews(ctx *middleware.Context, handler PostAddNewsHandler) *PostAddNews {
	return &PostAddNews{Context: ctx, Handler: handler}
}

/*PostAddNews swagger:route POST /add-news news postAddNews

PostAddNews post add news API

*/
type PostAddNews struct {
	Context *middleware.Context
	Handler PostAddNewsHandler
}

func (o *PostAddNews) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostAddNewsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
